// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: global/blk.proto

package global

import (
	context "context"
	protos "github.com/lshtar13/blockchain/node/protos"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlkSrv_ReqBlk_FullMethodName  = "/global.BlkSrv/ReqBlk"
	BlkSrv_SendBlk_FullMethodName = "/global.BlkSrv/SendBlk"
)

// BlkSrvClient is the client API for BlkSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlkSrvClient interface {
	ReqBlk(ctx context.Context, in *BlkReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[protos.Blk], error)
	SendBlk(ctx context.Context, in *protos.Blk, opts ...grpc.CallOption) (*protos.Ack, error)
}

type blkSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewBlkSrvClient(cc grpc.ClientConnInterface) BlkSrvClient {
	return &blkSrvClient{cc}
}

func (c *blkSrvClient) ReqBlk(ctx context.Context, in *BlkReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[protos.Blk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlkSrv_ServiceDesc.Streams[0], BlkSrv_ReqBlk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BlkReq, protos.Blk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlkSrv_ReqBlkClient = grpc.ServerStreamingClient[protos.Blk]

func (c *blkSrvClient) SendBlk(ctx context.Context, in *protos.Blk, opts ...grpc.CallOption) (*protos.Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(protos.Ack)
	err := c.cc.Invoke(ctx, BlkSrv_SendBlk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlkSrvServer is the server API for BlkSrv service.
// All implementations must embed UnimplementedBlkSrvServer
// for forward compatibility.
type BlkSrvServer interface {
	ReqBlk(*BlkReq, grpc.ServerStreamingServer[protos.Blk]) error
	SendBlk(context.Context, *protos.Blk) (*protos.Ack, error)
	mustEmbedUnimplementedBlkSrvServer()
}

// UnimplementedBlkSrvServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlkSrvServer struct{}

func (UnimplementedBlkSrvServer) ReqBlk(*BlkReq, grpc.ServerStreamingServer[protos.Blk]) error {
	return status.Errorf(codes.Unimplemented, "method ReqBlk not implemented")
}
func (UnimplementedBlkSrvServer) SendBlk(context.Context, *protos.Blk) (*protos.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBlk not implemented")
}
func (UnimplementedBlkSrvServer) mustEmbedUnimplementedBlkSrvServer() {}
func (UnimplementedBlkSrvServer) testEmbeddedByValue()                {}

// UnsafeBlkSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlkSrvServer will
// result in compilation errors.
type UnsafeBlkSrvServer interface {
	mustEmbedUnimplementedBlkSrvServer()
}

func RegisterBlkSrvServer(s grpc.ServiceRegistrar, srv BlkSrvServer) {
	// If the following call pancis, it indicates UnimplementedBlkSrvServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlkSrv_ServiceDesc, srv)
}

func _BlkSrv_ReqBlk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlkReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlkSrvServer).ReqBlk(m, &grpc.GenericServerStream[BlkReq, protos.Blk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlkSrv_ReqBlkServer = grpc.ServerStreamingServer[protos.Blk]

func _BlkSrv_SendBlk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Blk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlkSrvServer).SendBlk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlkSrv_SendBlk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlkSrvServer).SendBlk(ctx, req.(*protos.Blk))
	}
	return interceptor(ctx, in, info, handler)
}

// BlkSrv_ServiceDesc is the grpc.ServiceDesc for BlkSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlkSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "global.BlkSrv",
	HandlerType: (*BlkSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBlk",
			Handler:    _BlkSrv_SendBlk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReqBlk",
			Handler:       _BlkSrv_ReqBlk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "global/blk.proto",
}
