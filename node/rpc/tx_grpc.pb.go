// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: tx.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TxSrv_ReqTx_FullMethodName = "/rpc.TxSrv/ReqTx"
)

// TxSrvClient is the client API for TxSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TxSrvClient interface {
	ReqTx(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Tx], error)
}

type txSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewTxSrvClient(cc grpc.ClientConnInterface) TxSrvClient {
	return &txSrvClient{cc}
}

func (c *txSrvClient) ReqTx(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Tx], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TxSrv_ServiceDesc.Streams[0], TxSrv_ReqTx_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TxReq, Tx]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TxSrv_ReqTxClient = grpc.ServerStreamingClient[Tx]

// TxSrvServer is the server API for TxSrv service.
// All implementations must embed UnimplementedTxSrvServer
// for forward compatibility.
type TxSrvServer interface {
	ReqTx(*TxReq, grpc.ServerStreamingServer[Tx]) error
	mustEmbedUnimplementedTxSrvServer()
}

// UnimplementedTxSrvServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTxSrvServer struct{}

func (UnimplementedTxSrvServer) ReqTx(*TxReq, grpc.ServerStreamingServer[Tx]) error {
	return status.Errorf(codes.Unimplemented, "method ReqTx not implemented")
}
func (UnimplementedTxSrvServer) mustEmbedUnimplementedTxSrvServer() {}
func (UnimplementedTxSrvServer) testEmbeddedByValue()               {}

// UnsafeTxSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TxSrvServer will
// result in compilation errors.
type UnsafeTxSrvServer interface {
	mustEmbedUnimplementedTxSrvServer()
}

func RegisterTxSrvServer(s grpc.ServiceRegistrar, srv TxSrvServer) {
	// If the following call pancis, it indicates UnimplementedTxSrvServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TxSrv_ServiceDesc, srv)
}

func _TxSrv_ReqTx_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TxReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TxSrvServer).ReqTx(m, &grpc.GenericServerStream[TxReq, Tx]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TxSrv_ReqTxServer = grpc.ServerStreamingServer[Tx]

// TxSrv_ServiceDesc is the grpc.ServiceDesc for TxSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TxSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.TxSrv",
	HandlerType: (*TxSrvServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReqTx",
			Handler:       _TxSrv_ReqTx_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tx.proto",
}
